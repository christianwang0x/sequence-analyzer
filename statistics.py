import numpy as np


# Get a curve fit polynomial object
#   with the greatest degree of x being
#   "degrees"
def get_poly_fit(x, y, degrees, full=True):
    poly = np.polyfit(x, y, degrees, full=full)
    return poly


# Get the residual sum for data points around
#   a polynomial function generated by gen_poly_fit
def get_residual(x, y, degrees):
    poly = get_poly_fit(x, y, degrees, full=True)
    residual = poly[1]
    return residual[0]


# Find the most suitable number to use as the
#   highest degree of x in a polynomial representing
#   the data.
def get_best_fit_degree(x, y, max_degrees):
    residual = get_residual(x, y, 0)
    best_degree = 0
    for i in range(1, max_degrees):
        ri = get_residual(x, y, i)
        if ri < residual:
            best_degree = i
    return best_degree


# Invert a 2d array containing residual sums so that
#   the residual_sum is replaced with M - residual_sum
#   where M is the largest residual_sum in the data set
def invert_residual_data(data):
    correlation = []
    max_residual = max([x[0] for x in data])
    for (residual, uniformity) in data:
        new_residual = 100 * (max_residual - residual) / max_residual
        correlation.append((new_residual, uniformity))
    return correlation
